{"ast":null,"code":"var _jsxFileName = \"/home/danleks/Documents/programming/fullstackopen/part9/patientor/frontend/src/components/EntryDetails.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from 'react';\nimport { useStateValue } from \"../state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst assertNever = value => {\n  throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\n};\n\nconst Hospital = _ref => {\n  _s();\n\n  let {\n    entry\n  } = _ref;\n  const [{\n    diagnoses\n  }, dispatch] = useStateValue();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: entry.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: entry.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), entry.diagnosisCodes ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: entry.diagnosisCodes.map(code => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: diagnoses[code] ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [diagnoses[code].code, \" \", diagnoses[code].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 35\n        }, this) : null\n      }, code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 20\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Hospital, \"KSOXuu3UlovxBrdUTWtrcJ+PePs=\", false, function () {\n  return [useStateValue];\n});\n\n_c = Hospital;\n\nconst HealthCheck = _ref2 => {\n  _s2();\n\n  let {\n    entry\n  } = _ref2;\n  const [{\n    diagnoses\n  }, dispatch] = useStateValue();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: entry.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: entry.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), entry.diagnosisCodes ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: entry.diagnosisCodes.map(code => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: diagnoses[code] ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [diagnoses[code].code, \" \", diagnoses[code].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 35\n        }, this) : null\n      }, code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(HealthCheck, \"KSOXuu3UlovxBrdUTWtrcJ+PePs=\", false, function () {\n  return [useStateValue];\n});\n\n_c2 = HealthCheck;\n\nconst OccupationalHealthCare = _ref3 => {\n  _s3();\n\n  let {\n    entry\n  } = _ref3;\n  const [{\n    diagnoses\n  }, dispatch] = useStateValue();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: entry.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: entry.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"diagnose by \", entry.specialist]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), entry.diagnosisCodes ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: entry.diagnosisCodes.map(code => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: diagnoses[code] ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [diagnoses[code].code, \" \", diagnoses[code].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 35\n        }, this) : null\n      }, code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 20\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(OccupationalHealthCare, \"KSOXuu3UlovxBrdUTWtrcJ+PePs=\", false, function () {\n  return [useStateValue];\n});\n\n_c3 = OccupationalHealthCare;\n\nconst EntryDetails = _ref4 => {\n  let {\n    entry\n  } = _ref4;\n  console.log(entry.type);\n\n  switch (entry.type) {\n    case 'Hospital':\n      return /*#__PURE__*/_jsxDEV(Hospital, {\n        entry: entry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 20\n      }, this);\n\n    case 'HealthCheck':\n      return /*#__PURE__*/_jsxDEV(HealthCheck, {\n        entry: entry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }, this);\n\n    case 'OccupationalHealthcare':\n      return /*#__PURE__*/_jsxDEV(OccupationalHealthCare, {\n        entry: entry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 20\n      }, this);\n\n    default:\n      //return assertNever(entry);\n      return null;\n  }\n};\n\n_c4 = EntryDetails;\nexport default EntryDetails;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Hospital\");\n$RefreshReg$(_c2, \"HealthCheck\");\n$RefreshReg$(_c3, \"OccupationalHealthCare\");\n$RefreshReg$(_c4, \"EntryDetails\");","map":{"version":3,"sources":["/home/danleks/Documents/programming/fullstackopen/part9/patientor/frontend/src/components/EntryDetails.tsx"],"names":["React","useStateValue","assertNever","value","Error","JSON","stringify","Hospital","entry","diagnoses","dispatch","date","description","diagnosisCodes","map","code","name","HealthCheck","OccupationalHealthCare","specialist","EntryDetails","console","log","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Entries, HealthCheckEntry, HospitalEntry, OccupationalHealthcareEntry} from '../types'\nimport {useStateValue} from \"../state\";\n\nconst assertNever = (value: never): never => {\n    throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`)\n}\n\nconst Hospital: React.FC<{entry: HospitalEntry}> = ({entry}) => {\n    const [{diagnoses}, dispatch] = useStateValue();\n    return (\n        <div>\n            <p>{entry.date}</p>\n            <p>{entry.description}</p>\n            {entry.diagnosisCodes\n                ?  <ul>\n                    {entry.diagnosisCodes.map(code => (\n                        <li key={code}>\n                            {diagnoses[code]\n                                ? <span>{diagnoses[code].code} {diagnoses[code].name}</span>\n                                : null }\n                        </li>\n                    ))}\n                </ul>\n                : null\n            }\n        </div>\n    );\n};\n\nconst HealthCheck: React.FC<{entry: HealthCheckEntry}> = ({entry}) => {\n    const [{diagnoses}, dispatch] = useStateValue();\n    return (\n        <div>\n            <p>{entry.date}</p>\n            <p>{entry.description}</p>\n            {entry.diagnosisCodes\n                ?  <ul>\n                    {entry.diagnosisCodes.map(code => (\n                        <li key={code}>\n                            {diagnoses[code]\n                                ? <span>{diagnoses[code].code} {diagnoses[code].name}</span>\n                                : null }\n                        </li>\n                    ))}\n                </ul>\n                : null\n            }\n        </div>\n    );\n};\n\nconst OccupationalHealthCare: React.FC<{entry: OccupationalHealthcareEntry}> = ({entry}) => {\n    const [{diagnoses}, dispatch] = useStateValue();\n    return (\n        <div>\n            <p>{entry.date}</p>\n            <p>{entry.description}</p>\n            <p>diagnose by {entry.specialist}</p>\n            {entry.diagnosisCodes\n                ?  <ul>\n                    {entry.diagnosisCodes.map(code => (\n                        <li key={code}>\n                            {diagnoses[code]\n                                ? <span>{diagnoses[code].code} {diagnoses[code].name}</span>\n                                : null }\n                        </li>\n                    ))}\n                </ul>\n                : null\n            }\n        </div>\n    );\n};\n\nconst EntryDetails: React.FC<{ entry: Entries }> = ({entry}) => {\n    console.log(entry.type)\n    switch(entry.type) {\n        case 'Hospital':\n            return <Hospital entry={entry as HospitalEntry} />;\n        case 'HealthCheck':\n            return <HealthCheck entry={entry as HealthCheckEntry} />;\n        case 'OccupationalHealthcare':\n            return <OccupationalHealthCare entry={entry as OccupationalHealthcareEntry} />;\n        default:\n            //return assertNever(entry);\n            return null\n    }\n};\n\nexport default EntryDetails;"]},"metadata":{},"sourceType":"module"}
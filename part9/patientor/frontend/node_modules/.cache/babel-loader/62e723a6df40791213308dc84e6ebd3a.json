{"ast":null,"code":"var _jsxFileName = \"/home/danleks/Documents/programming/fullstackopen/part9/patientor/frontend/src/components/EntryDetails.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst assertNever = value => {\n  throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\n};\n\nconst HospitalEntry = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hospital\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HospitalEntry;\n\nconst OccupationalHealthCareEntry = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"OccupationalHealthCareEntry\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = OccupationalHealthCareEntry;\n\nconst HealthCheckEntry = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"HealthCheckEntry\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = HealthCheckEntry;\n\nconst EntryDetails = _ref => {\n  let {\n    entries\n  } = _ref;\n  entries.map(entry => {\n    switch (entry.type) {\n      case 'Hospital':\n        return /*#__PURE__*/_jsxDEV(HospitalEntry, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 24\n        }, this);\n\n      case 'HealthCheck':\n        return /*#__PURE__*/_jsxDEV(HealthCheckEntry, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 24\n        }, this);\n\n      case 'OccupationalHealthcare':\n        return /*#__PURE__*/_jsxDEV(OccupationalHealthCareEntry, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return assertNever(entry);\n    }\n  });\n};\n\n_c4 = EntryDetails;\nexport default EntryDetails;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"HospitalEntry\");\n$RefreshReg$(_c2, \"OccupationalHealthCareEntry\");\n$RefreshReg$(_c3, \"HealthCheckEntry\");\n$RefreshReg$(_c4, \"EntryDetails\");","map":{"version":3,"sources":["/home/danleks/Documents/programming/fullstackopen/part9/patientor/frontend/src/components/EntryDetails.tsx"],"names":["React","assertNever","value","Error","JSON","stringify","HospitalEntry","OccupationalHealthCareEntry","HealthCheckEntry","EntryDetails","entries","map","entry","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,MAAMC,WAAW,GAAIC,KAAD,IAAyB;AACzC,QAAM,IAAIC,KAAJ,CAAW,yCAAwCC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAsB,EAAzE,CAAN;AACH,CAFD;;AAIA,MAAMI,aAAa,GAAG,MAAM;AACxB,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAND;;KAAMA,a;;AAQN,MAAMC,2BAA2B,GAAG,MAAM;AACtC,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAND;;MAAMA,2B;;AAQN,MAAMC,gBAAgB,GAAG,MAAM;AAC3B,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAND;;MAAMA,gB;;AAUN,MAAMC,YAA8C,GAAG,QAAe;AAAA,MAAd;AAACC,IAAAA;AAAD,GAAc;AAClEA,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,IAAI;AACjB,YAAOA,KAAK,CAACC,IAAb;AACI,WAAK,UAAL;AACI,4BAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;;AACJ,WAAK,aAAL;AACI,4BAAO,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;;AACJ,WAAK,wBAAL;AACI,4BAAO,QAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;;AACJ;AACI,eAAOZ,WAAW,CAACW,KAAD,CAAlB;AARR;AAUH,GAXD;AAYH,CAbD;;MAAMH,Y;AAeN,eAAeA,YAAf","sourcesContent":["import React from 'react';\nimport { Entries } from '../types'\n\nconst assertNever = (value: never): never => {\n    throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`)\n}\n\nconst HospitalEntry = () => {\n    return (\n        <div>\n            hospital\n        </div>\n    );\n};\n\nconst OccupationalHealthCareEntry = () => {\n    return (\n        <div>\n            OccupationalHealthCareEntry\n        </div>\n    );\n};\n\nconst HealthCheckEntry = () => {\n    return (\n        <div>\n            HealthCheckEntry\n        </div>\n    );\n};\n\n\n\nconst EntryDetails: React.FC<{ entries: Entries[] }> = ({entries}) => {\n    entries.map(entry => {\n        switch(entry.type) {\n            case 'Hospital':\n                return <HospitalEntry />;\n            case 'HealthCheck':\n                return <HealthCheckEntry />;\n            case 'OccupationalHealthcare':\n                return <OccupationalHealthCareEntry />;\n            default:\n                return assertNever(entry)\n        }\n    })\n};\n\nexport default EntryDetails;"]},"metadata":{},"sourceType":"module"}
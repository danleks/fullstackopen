{"ast":null,"code":"var _jsxFileName = \"/home/danleks/Documents/programming/fullstackopen/part9/patientor/frontend/src/components/IndividualPatientInfo.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { apiBaseUrl } from \"../constants\";\nimport { setIndividualPatient, useStateValue } from \"../state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst IndividualPatientInfo = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [{\n    patient\n  }, dispatch] = useStateValue();\n  const [error, setError] = React.useState();\n  React.useEffect(() => {\n    const fetchIndividualPatient = async () => {\n      try {\n        const {\n          data: IndividualPatientFromApi\n        } = await axios.get(`${apiBaseUrl}/patients/${id}`);\n        dispatch(setIndividualPatient(IndividualPatientFromApi));\n      } catch (e) {\n        if (axios.isAxiosError(e)) {\n          var _e$response, _e$response2, _e$response2$data;\n\n          console.error((e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data) || 'Unrecognized axios error');\n          setError(String(e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.error) || 'Unrecognized axios error');\n        } else {\n          console.error('unknown error', e);\n          setError('unknown error');\n        }\n      }\n    };\n\n    void fetchIndividualPatient();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.values(patient).map(patient => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: patient.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ssh: \", patient.ssn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"occupation: \", patient.occupation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"entries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), patient.entries.map(entry => {\n        var _entry$diagnosisCodes;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [entry.date, \" \", entry.description, ((_entry$diagnosisCodes = entry.diagnosisCodes) === null || _entry$diagnosisCodes === void 0 ? void 0 : _entry$diagnosisCodes.length) > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: entry.diagnosisCodes.map(_ref => {\n              let {\n                code\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: code\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 34\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this);\n      })]\n    }, patient.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(IndividualPatientInfo, \"2RggCClA989jbemk0gtbPS2tYm8=\", false, function () {\n  return [useParams, useStateValue];\n});\n\n_c = IndividualPatientInfo;\nexport default IndividualPatientInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndividualPatientInfo\");","map":{"version":3,"sources":["/home/danleks/Documents/programming/fullstackopen/part9/patientor/frontend/src/components/IndividualPatientInfo.tsx"],"names":["React","useParams","axios","apiBaseUrl","setIndividualPatient","useStateValue","IndividualPatientInfo","id","patient","dispatch","error","setError","useState","useEffect","fetchIndividualPatient","data","IndividualPatientFromApi","get","e","isAxiosError","console","response","String","Object","values","map","name","ssn","occupation","entries","entry","date","description","diagnosisCodes","length","code"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,SAAQC,oBAAR,EAA8BC,aAA9B,QAAkD,UAAlD;;;AAEA,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAASN,SAAS,EAAxB;AACA,QAAM,CAAC;AAACO,IAAAA;AAAD,GAAD,EAAYC,QAAZ,IAAwBJ,aAAa,EAA3C;AAEA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBX,KAAK,CAACY,QAAN,EAA1B;AAEAZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AAClB,UAAMC,sBAAsB,GAAG,YAAY;AACvC,UAAI;AACA,cAAM;AAAEC,UAAAA,IAAI,EAAEC;AAAR,YAAqC,MAAMd,KAAK,CAACe,GAAN,CAAoB,GAAEd,UAAW,aAAYI,EAAG,EAAhD,CAAjD;AACAE,QAAAA,QAAQ,CAACL,oBAAoB,CAACY,wBAAD,CAArB,CAAR;AACH,OAHD,CAGE,OAAOE,CAAP,EAAmB;AACjB,YAAIhB,KAAK,CAACiB,YAAN,CAAmBD,CAAnB,CAAJ,EAA2B;AAAA;;AACvBE,UAAAA,OAAO,CAACV,KAAR,CAAc,CAAAQ,CAAC,SAAD,IAAAA,CAAC,WAAD,2BAAAA,CAAC,CAAEG,QAAH,4DAAaN,IAAb,KAAqB,0BAAnC;AACAJ,UAAAA,QAAQ,CAACW,MAAM,CAACJ,CAAD,aAACA,CAAD,uCAACA,CAAC,CAAEG,QAAJ,sEAAC,aAAaN,IAAd,sDAAC,kBAAmBL,KAApB,CAAN,IAAoC,0BAArC,CAAR;AACH,SAHD,MAGO;AACHU,UAAAA,OAAO,CAACV,KAAR,CAAc,eAAd,EAA+BQ,CAA/B;AACAP,UAAAA,QAAQ,CAAC,eAAD,CAAR;AACH;AACJ;AACJ,KAbD;;AAcA,SAAKG,sBAAsB,EAA3B;AACH,GAhBD,EAgBG,EAhBH;AAkBA,sBACI;AAAA,cACKS,MAAM,CAACC,MAAP,CAAchB,OAAd,EAAuBiB,GAAvB,CAA4BjB,OAAD,iBACxB;AAAA,8BACI;AAAA,kBAAKA,OAAO,CAACkB;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,4BAASlB,OAAO,CAACmB,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,mCAAgBnB,OAAO,CAACoB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKKpB,OAAO,CAACqB,OAAR,CAAgBJ,GAAhB,CAAoBK,KAAK;AAAA;;AAAA,4BACtB;AAAA,qBACKA,KAAK,CAACC,IADX,OACkBD,KAAK,CAACE,WADxB,EAEK,0BAAAF,KAAK,CAACG,cAAN,gFAAsBC,MAAtB,IAA+B,CAA/B,gBACI;AAAA,sBACIJ,KAAK,CAACG,cAAN,CAAqBR,GAArB,CAAyB;AAAA,kBAAC;AAACU,gBAAAA;AAAD,eAAD;AAAA,kCACtB;AAAA,0BAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,sBADsB;AAAA,aAAzB;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,GAMK,IARV;AAAA;AAAA;AAAA;AAAA;AAAA,gBADsB;AAAA,OAAzB,CALL;AAAA,OAAU3B,OAAO,CAACD,EAAlB;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CAjDD;;GAAMD,qB;UACaL,S,EACeI,a;;;KAF5BC,qB;AAmDN,eAAeA,qBAAf","sourcesContent":["import React from 'react';\nimport {useParams} from \"react-router-dom\";\nimport {Patient} from \"../types\";\nimport axios from \"axios\";\nimport {apiBaseUrl} from \"../constants\";\nimport {setIndividualPatient, useStateValue} from \"../state\";\n\nconst IndividualPatientInfo = () => {\n    const { id } = useParams<{ id: string}>();\n    const [{patient}, dispatch] = useStateValue();\n\n    const [error, setError] = React.useState<string>();\n\n    React.useEffect(() => {\n        const fetchIndividualPatient = async () => {\n            try {\n                const { data: IndividualPatientFromApi } = await axios.get<Patient>(`${apiBaseUrl}/patients/${id}`);\n                dispatch(setIndividualPatient(IndividualPatientFromApi))\n            } catch (e: unknown) {\n                if (axios.isAxiosError(e)) {\n                    console.error(e?.response?.data || 'Unrecognized axios error');\n                    setError(String(e?.response?.data?.error) || 'Unrecognized axios error');\n                } else {\n                    console.error('unknown error', e);\n                    setError('unknown error');\n                }\n            }\n        }\n        void fetchIndividualPatient()\n    }, [])\n\n    return (\n        <div>\n            {Object.values(patient).map((patient: Patient) => (\n                <div key={patient.id}>\n                    <h2>{patient.name}</h2>\n                    <p>ssh: {patient.ssn}</p>\n                    <p>occupation: {patient.occupation}</p>\n                    <h3>entries</h3>\n                    {patient.entries.map(entry => (\n                        <div>\n                            {entry.date} {entry.description}\n                            {entry.diagnosisCodes?.length > 0\n                                ?<ul>\n                                    {entry.diagnosisCodes.map(({code}) => (\n                                        <li>{code}</li>\n                                    ))}\n                                </ul>\n                                : null\n                            }\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    )\n};\n\nexport default IndividualPatientInfo;"]},"metadata":{},"sourceType":"module"}